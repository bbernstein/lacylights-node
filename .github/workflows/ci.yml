name: CI - Build and Test

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  lint-and-build:
    name: Lint, Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.x, 24.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript compilation
        run: npm run build

      - name: Setup test environment
        run: |
          cp .env.example .env || echo "No .env.example found, creating .env"
          cat > .env << EOF
          DATABASE_URL="file:./test.db"
          PORT=4000
          NODE_ENV=test
          CORS_ORIGIN="http://localhost:3000"
          ARTNET_ENABLED=false
          DMX_UNIVERSE_COUNT=2
          DMX_REFRESH_RATE=44
          NON_INTERACTIVE=true
          EOF

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '24.x'
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run dependency check
        run: npx depcheck --ignores="@types/*,ts-jest,tsx,husky,lint-staged,@graphql-inspector/cli"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ -f Dockerfile ]; then
            docker build -t lacylights-node:test .
          else
            echo "No Dockerfile found, skipping Docker build"
          fi