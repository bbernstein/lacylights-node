// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projects ProjectUser[]
  previewSessions PreviewSession[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users     ProjectUser[]
  fixtures  FixtureInstance[]
  scenes    Scene[]
  cueLists  CueList[]
  previewSessions PreviewSession[]

  @@map("projects")
}

model ProjectUser {
  id       String      @id @default(cuid())
  userId   String      @map("user_id")
  projectId String     @map("project_id")
  role     ProjectRole @default(VIEWER)
  joinedAt DateTime    @default(now()) @map("joined_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_users")
}

model FixtureDefinition {
  id           String      @id @default(cuid())
  manufacturer String
  model        String
  type         FixtureType
  isBuiltIn    Boolean     @default(false) @map("is_built_in")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  channels  ChannelDefinition[]
  modes     FixtureMode[]
  instances FixtureInstance[]

  @@unique([manufacturer, model])
  @@map("fixture_definitions")
}

model ChannelDefinition {
  id           String      @id @default(cuid())
  name         String
  type         ChannelType
  offset       Int
  minValue     Int         @default(0) @map("min_value")
  maxValue     Int         @default(255) @map("max_value")
  defaultValue Int         @default(0) @map("default_value")
  definitionId String      @map("definition_id")

  definition   FixtureDefinition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  modeChannels ModeChannel[]

  @@map("channel_definitions")
}

model FixtureMode {
  id           String @id @default(cuid())
  name         String
  shortName    String? @map("short_name")
  channelCount Int     @map("channel_count")
  definitionId String  @map("definition_id")

  definition       FixtureDefinition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  modeChannels     ModeChannel[]
  fixtureInstances FixtureInstance[]

  @@unique([definitionId, name])
  @@map("fixture_modes")
}

model ModeChannel {
  id        String @id @default(cuid())
  modeId    String @map("mode_id")
  channelId String @map("channel_id")
  offset    Int

  mode    FixtureMode       @relation(fields: [modeId], references: [id], onDelete: Cascade)
  channel ChannelDefinition @relation(fields: [channelId], references: [id])

  @@unique([modeId, offset])
  @@map("mode_channels")
}

model FixtureInstance {
  id           String       @id @default(cuid())
  name         String
  description  String?
  
  // Fixture Definition Reference
  definitionId String       @map("definition_id")
  manufacturer String?      // Denormalized from definition
  model        String?      // Denormalized from definition
  type         FixtureType? // Denormalized from definition
  
  // Flattened Mode Information
  modeName     String?      @map("mode_name")
  channelCount Int?         @map("channel_count")
  
  // Legacy field to be removed after migration
  modeId       String?      @map("mode_id")
  
  // DMX Configuration
  projectId    String       @map("project_id")
  universe     Int
  startChannel Int          @map("start_channel")
  tags         String[]     @default([])
  
  // Ordering
  projectOrder Int?         @map("project_order") // Order within project fixture list
  
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  definition    FixtureDefinition @relation(fields: [definitionId], references: [id])
  mode          FixtureMode?      @relation(fields: [modeId], references: [id])
  project       Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  channels      InstanceChannel[]
  fixtureValues FixtureValue[]

  @@unique([projectId, universe, startChannel])
  @@map("fixture_instances")
}

model Scene {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String   @map("project_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fixtureValues FixtureValue[]
  cues          Cue[]

  @@map("scenes")
}

model FixtureValue {
  id            String @id @default(cuid())
  sceneId       String @map("scene_id")
  fixtureId     String @map("fixture_id")
  channelValues Int[]  @default([]) // Array of 0-255 values, index = channel offset
  sceneOrder    Int?   @map("scene_order") // Order within this scene's fixture list

  scene   Scene           @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  fixture FixtureInstance @relation(fields: [fixtureId], references: [id], onDelete: Cascade)

  @@unique([sceneId, fixtureId])
  @@map("fixture_values")
}

model InstanceChannel {
  id           String      @id @default(cuid())
  fixtureId    String      @map("fixture_id")
  offset       Int
  name         String
  type         ChannelType
  minValue     Int         @default(0) @map("min_value")
  maxValue     Int         @default(255) @map("max_value")
  defaultValue Int         @default(0) @map("default_value")

  fixture FixtureInstance @relation(fields: [fixtureId], references: [id], onDelete: Cascade)

  @@unique([fixtureId, offset])
  @@map("instance_channels")
}


model CueList {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String   @map("project_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  cues    Cue[]

  @@map("cue_lists")
}

model Cue {
  id          String      @id @default(cuid())
  name        String
  cueNumber   Float       @map("cue_number")
  cueListId   String      @map("cue_list_id")
  sceneId     String      @map("scene_id")
  fadeInTime  Float       @default(0) @map("fade_in_time")
  fadeOutTime Float       @default(0) @map("fade_out_time")
  followTime  Float?      @map("follow_time")
  easingType  EasingType? @map("easing_type")
  notes       String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  cueList CueList @relation(fields: [cueListId], references: [id], onDelete: Cascade)
  scene   Scene   @relation(fields: [sceneId], references: [id], onDelete: Cascade)

  @@unique([cueListId, cueNumber])
  @@map("cues")
}

model PreviewSession {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("preview_sessions")
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
}

enum FixtureType {
  LED_PAR
  MOVING_HEAD
  STROBE
  DIMMER
  OTHER
}

enum ChannelType {
  INTENSITY
  RED
  GREEN
  BLUE
  WHITE
  AMBER
  UV
  PAN
  TILT
  ZOOM
  FOCUS
  IRIS
  GOBO
  COLOR_WHEEL
  EFFECT
  STROBE
  MACRO
  OTHER
}

enum EasingType {
  LINEAR
  EASE_IN_OUT_CUBIC
  EASE_IN_OUT_SINE
  EASE_OUT_EXPONENTIAL
  BEZIER
  S_CURVE
}